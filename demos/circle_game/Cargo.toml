# You must change these to your own details.
[package]
name = "circle_game"
description = "Simple demo of teleportal platform engine"
version = "0.0.1"
authors = ["Ryan Butler <ryan.butler@teleportal.app>"]
categories = ["wasm"]
readme = "README.md"
edition = "2021"
rust-version = "1.58"
# Prevent accidental `cargo publish`
publish = false

[lib]
crate-type = ["cdylib", "rlib"]

[features]
# default = ["bevy/dynamic"]

# Dependencies shared by both native and WASM
[dependencies]

tp_client = { path = "../../client/rust" }
bevy_prototype_lyon = "0.4"
lazy_static = "1"
bevy = "0.6"
derive_more = "0.99"
color-eyre = "0.6"
eyre = "0.6"
rand = "0.8"


# Dependencies for WASM only.
[target.'cfg(target_arch = "wasm32")'.dependencies]
tracing-wasm = "0.2" # Tracing-wasm broke semver, this locks to the working version

# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
wasm-bindgen = "0.2"

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[target.'cfg(target_arch = "wasm32")'.dependencies.web-sys]
version = "0.3.22"
features = ["console"]

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure
[target.'cfg(all(target_arch = "wasm32"))'.dependencies]
console_error_panic_hook = "0.1.5"

# These crates are used for running unit tests.
[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = "0.2.45"
futures = "0.1.27"
js-sys = "0.3.22"
wasm-bindgen-futures = "0.3.22"
