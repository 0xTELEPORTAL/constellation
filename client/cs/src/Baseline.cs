using generated = tp_client.generated;
using RSharp;
using System.Collections.Generic;
using ObjectHandle = Teleportal.Client.Object.ObjectHandle;
using ExampleContract = Teleportal.Client.Contract.ExampleContract;
using ContractDataHandle = Teleportal.Client.Contract.ContractDataHandle;
using ContractData = Teleportal.Client.Contract.ContractData;

// This file is manually implemented for now but will be autogenerated eventually

namespace Teleportal.Client
{
    public sealed partial class Baseline : OpaqueWrapper<Baseline>
    {

        public Baseline(bool is_main) : base(new Ptr<Baseline>(
            generated.__Internal.TpClientBaselineBaselineNew((byte)(is_main ? 0 : 1))),
            OwnershipSemantics.Owned
        )
        { }

        public Baseline(Ptr<Baseline> inner, OwnershipSemantics ownershipSemantics) : base(inner, ownershipSemantics) { }

        override protected void NativeDrop(Ptr<Baseline> inner)
        {
            generated.__Internal.TpClientBaselineBaselineDrop(inner.p);
        }

        public bool IsMain
        {
            get
            {
                return generated.__Internal.TpClientBaselineBaselineKind(this.Inner.Value.p) == 0;
            }
        }



        public ContractData ContractData(ContractDataHandle h)
        {
            if (!h.Inner.HasValue)
            {
                throw new System.ArgumentNullException("`h` was already disposed!");
            }
            var p = new Ptr<ContractData>(
                generated.__Internal.TpClientBaselineBaselineContractData(
                    this.Inner.Value.p,
                    h.Inner.Value.p
                )
            );
            return new ContractData(p);
        }
    }
}
