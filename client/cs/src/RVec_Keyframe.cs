using generated = constellation.generated;
using RSharp;
using IntPtr = System.IntPtr;

// This file is manually implemented for now but will be autogenerated eventually

namespace Teleportal.Client.Contract.Properties.Channels
{
    using struct_RVec_Keyframe_U8 = constellation.Vec_constellation_contract_properties_channelsKeyframeU8.__Internal;
    using struct_RVec_Keyframe_U8_ptr = constellation.Vec_constellation_contract_properties_channelsKeyframeU8_ptr.__Internal;
    using struct_RVec_Keyframe_U8_const_ptr = constellation.Vec_constellation_contract_properties_channelsKeyframeU8_const_ptr.__Internal;

    public sealed class RVec_Keyframe_U8 : RVec<Keyframe_U8, struct_RVec_Keyframe_U8>
    {

        // TODO: Make versions from const_ptr and ptr
        public RVec_Keyframe_U8(struct_RVec_Keyframe_U8 inner) : base(inner) { }

        public RVec_Keyframe_U8() : base(NewHelper(generated.__Internal.ConstellationContractPropertiesChannelsRVecKeyframeU8New)) { }

        override protected void NativeDrop(struct_RVec_Keyframe_U8 inner)
        {
            generated.__Internal.ConstellationContractPropertiesChannelsRVecKeyframeU8Drop(inner);
        }

        public unsafe override void push(Keyframe_U8 e)
        {
            if (!e.Inner.HasValue)
            {
                throw new System.Exception("Tried to push value that was already disposed!");
            }
            if (!this.Inner.HasValue)
            {
                throw new System.Exception("Tried to call a method on a value that was already disposed!");
            }
            var shared = this.Inner.Value;
            generated.__Internal.ConstellationContractPropertiesChannelsRVecKeyframeU8Push((IntPtr)(&shared), e.Inner.Value.p);
            e.Inner = null;  // move from `e`
            this.Inner = shared;
        }

        public unsafe override Keyframe_U8 this[int index]
        {
            get
            {
                var inner = this.Inner.Value;
                var inner_ptr = &inner;
                var item = new Ptr<Keyframe_U8>(generated.__Internal.ConstellationContractPropertiesChannelsRVecKeyframeU8Get((IntPtr)(inner_ptr), (ulong)index));
                return new Keyframe_U8(item, OwnershipSemantics.SharedRef);
            }

            set
            {
                if (this.OwnershipSemantics == OwnershipSemantics.SharedRef)
                {
                    throw new OwnershipException("`this` is a SharedRef");
                }
                if (value.OwnershipSemantics != OwnershipSemantics.Owned)
                {
                    throw new OwnershipException("`value` is not Owned");
                }
                var val_ptr = value.Inner.Value;
                value.Inner = null;  // Move from `value`

                var array = new Ptr<Keyframe_U8>(this.Inner.Value.ptr);
                generated.__Internal.ConstellationContractPropertiesChannelsRVecKeyframeU8Set(array.p, (ulong)index, val_ptr.p);
            }
        }
    }
}
